// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// secured_service endpoints
//
// Command:
// $ goa gen goa.design/plugins/security/examples/multi_auth/design

package securedservice

import (
	"context"

	"goa.design/goa"
	"goa.design/goa/security"
)

// Endpoints wraps the "secured_service" service endpoints.
type Endpoints struct {
	Signin           goa.Endpoint
	Secure           goa.Endpoint
	DoublySecure     goa.Endpoint
	AlsoDoublySecure goa.Endpoint
}

// NewEndpoints wraps the methods of the "secured_service" service with
// endpoints.
func NewEndpoints(s Service, bafn security.AuthorizeBasicAuthFunc, jwtfn security.AuthorizeJWTFunc, keyfn security.AuthorizeAPIKeyFunc, oauthfn security.AuthorizeOAuth2Func) *Endpoints {
	return &Endpoints{
		Signin:           NewSigninEndpoint(s, bafn),
		Secure:           NewSecureEndpoint(s, jwtfn),
		DoublySecure:     NewDoublySecureEndpoint(s, jwtfn, keyfn),
		AlsoDoublySecure: NewAlsoDoublySecureEndpoint(s, jwtfn, keyfn, oauthfn, bafn),
	}
}

// Use applies the given middleware to all the "secured_service" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Signin = m(e.Signin)
	e.Secure = m(e.Secure)
	e.DoublySecure = m(e.DoublySecure)
	e.AlsoDoublySecure = m(e.AlsoDoublySecure)
}

// NewSigninEndpoint returns an endpoint function that calls the method
// "signin" of service "secured_service".
func NewSigninEndpoint(s Service, bafn security.AuthorizeBasicAuthFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SigninPayload)
		var err error
		scheme := security.BasicAuthScheme{
			Name: "basic",
		}
		ctx, err = bafn(ctx, *p.Username, *p.Password, &scheme)
		if err != nil {
			return nil, err
		}
		return nil, s.Signin(ctx, p)
	}
}

// NewSecureEndpoint returns an endpoint function that calls the method
// "secure" of service "secured_service".
func NewSecureEndpoint(s Service, jwtfn security.AuthorizeJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SecurePayload)
		var err error
		jwtSch := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:read"},
		}
		ctx, err = jwtfn(ctx, *p.Token, &jwtSch)
		if err != nil {
			return nil, err
		}
		return s.Secure(ctx, p)
	}
}

// NewDoublySecureEndpoint returns an endpoint function that calls the method
// "doubly_secure" of service "secured_service".
func NewDoublySecureEndpoint(s Service, jwtfn security.AuthorizeJWTFunc, keyfn security.AuthorizeAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DoublySecurePayload)
		var err error
		jwtSch := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:read", "api:write"},
		}
		ctx, err = jwtfn(ctx, *p.Token, &jwtSch)
		if err == nil {
			apiKeySch := security.APIKeyScheme{
				Name: "api_key",
			}
			ctx, err = keyfn(ctx, *p.Key, &apiKeySch)
		}
		if err != nil {
			return nil, err
		}
		return s.DoublySecure(ctx, p)
	}
}

// NewAlsoDoublySecureEndpoint returns an endpoint function that calls the
// method "also_doubly_secure" of service "secured_service".
func NewAlsoDoublySecureEndpoint(s Service, jwtfn security.AuthorizeJWTFunc, keyfn security.AuthorizeAPIKeyFunc, oauthfn security.AuthorizeOAuth2Func, bafn security.AuthorizeBasicAuthFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AlsoDoublySecurePayload)
		var err error
		jwtSch := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:read", "api:write"},
		}
		ctx, err = jwtfn(ctx, *p.Token, &jwtSch)
		if err == nil {
			apiKeySch := security.APIKeyScheme{
				Name: "api_key",
			}
			ctx, err = keyfn(ctx, *p.Key, &apiKeySch)
		}
		if err != nil {
			oauth2Sch := security.OAuth2Scheme{
				Name:           "oauth2",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{"api:read", "api:write"},
				Flows: []*security.OAuthFlow{
					&security.OAuthFlow{
						Type:             "authorization_code",
						AuthorizationURL: "http://localhost:8080/authorization",
						TokenURL:         "http://localhost:8080/token",
						RefreshURL:       "http://localhost:8080/refresh",
					},
				},
			}
			ctx, err = oauthfn(ctx, *p.OauthToken, &oauth2Sch)
			if err == nil {
				basicAuthSch := security.BasicAuthScheme{
					Name: "basic",
				}
				ctx, err = bafn(ctx, *p.Username, *p.Password, &basicAuthSch)
			}
		}
		if err != nil {
			return nil, err
		}
		return s.AlsoDoublySecure(ctx, p)
	}
}
